/**
 * VNPay Payment Service
 * X·ª≠ l√Ω t·∫°o URL thanh to√°n, x√°c th·ª±c ch·ªØ k√Ω v√† IPN
 */

import CryptoJS from 'crypto-js';
import qs from 'qs';
import vnpayConfig from '../config/vnpayConfig';

/**
 * T·∫°o ch·ªØ k√Ω HMAC SHA512
 */
const createHmacSHA512 = (secretKey, data) => {
  const hmac = CryptoJS.HmacSHA512(data, secretKey);
  return hmac.toString(CryptoJS.enc.Hex);
};

/**
 * Lo·∫°i b·ªè c√°c tham s·ªë null/undefined/empty string
 */
const filterParams = (params) =>
  Object.fromEntries(
    Object.entries(params).filter(
      ([, value]) => value !== null && value !== undefined && value !== ''
    )
  );

/**
 * T·∫°o chu·ªói hash/query theo ƒë√∫ng chu·∫©n VNPay (PHP urlencode)
 * S·ª≠ d·ª•ng RFC1738 ƒë·ªÉ space = + (t∆∞∆°ng th√≠ch VNPay PHP)
 * QUAN TR·ªåNG: Ph·∫£i ƒë·ªìng nh·∫•t tuy·ªát ƒë·ªëi cho c·∫£ k√Ω v√† query
 */
const buildSignedQuery = (params) => {
  const filtered = filterParams(params);
  const sorted = Object.keys(filtered)
    .sort()
    .reduce((o, k) => ((o[k] = filtered[k]), o), {});
  // Encode ki·ªÉu form (space = '+') cho c·∫£ k√Ω v√† query
  return qs.stringify(sorted, { encode: true, format: 'RFC1738' });
};

/**
 * Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát v√† k√Ω t·ª± ƒë·∫∑c bi·ªát trong OrderInfo
 */
const sanitizeOrderInfo = (text) => {
  if (!text) {
    return 'Thanh toan don hang';
  }

  const normalized = text
    .normalize('NFD')
    .replace(/[\u0000-\u001f]/g, ' ')
    .replace(/[\u007f-\u009f]/g, ' ')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/ƒë/g, 'd')
    .replace(/ƒê/g, 'D');

  const cleaned = normalized.replace(/[^0-9A-Za-z\s]/g, ' ').replace(/\s+/g, ' ').trim();

  return cleaned ? cleaned.slice(0, 255) : 'Thanh toan don hang';
};

/**
 * Format date theo ƒë·ªãnh d·∫°ng yyyyMMddHHmmss
 */
const formatDateTime = (date = new Date()) => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}${month}${day}${hours}${minutes}${seconds}`;
};

/**
 * T·∫°o m√£ giao d·ªãch duy nh·∫•t (TxnRef)
 * Format: Ch·ªâ [A-Z a-z 0-9], ƒë·ªô d√†i ‚â§ 34 (theo VNPay sandbox)
 */
const generateTxnRef = (invoiceCode) => {
  const base = String(invoiceCode)
    .replace(/[^A-Za-z0-9]/g, '')
    .slice(0, 12);
  const ts = Date.now().toString(36).slice(-10);
  const rnd = Math.random().toString(36).slice(2, 6);
  return (base + ts + rnd).slice(0, 34);
};

/**
 * L·∫•y ƒë·ªãa ch·ªâ IP c·ªßa client
 * Trong m√¥i tr∆∞·ªùng Electron, c√≥ th·ªÉ d√πng IP m·∫∑c ƒë·ªãnh
 */
const getClientIpAddress = () => {
  // Trong Electron Desktop, s·ª≠ d·ª•ng IP local ho·∫∑c IP public n·∫øu c√≥
  return '127.0.0.1';
};

/**
 * T·∫°o URL thanh to√°n VNPay
 * @param {Object} invoiceData - Th√¥ng tin h√≥a ƒë∆°n
 * @param {string} invoiceData.maHd - M√£ h√≥a ƒë∆°n
 * @param {number} invoiceData.tongTien - T·ªïng ti·ªÅn (VNƒê)
 * @param {string} invoiceData.moTa - M√¥ t·∫£ ƒë∆°n h√†ng
 * @param {boolean} directToQR - Hi·ªÉn th·ªã tr·ª±c ti·∫øp m√†n h√¨nh QR
 * @returns {Object} { paymentUrl, txnRef, signData }
 */
export const createVNPayPaymentUrl = (invoiceData, directToQR = true) => {
  try {
    const { maHd, tongTien, moTa } = invoiceData;
    if (!maHd || tongTien === undefined || tongTien === null) {
      throw new Error('Thi·∫øu th√¥ng tin m√£ h√≥a ƒë∆°n ho·∫∑c t·ªïng ti·ªÅn');
    }
    const numericAmount = Number(tongTien);
    if (!Number.isFinite(numericAmount) || numericAmount <= 0) {
      throw new Error('T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá');
    }
    const txnRef = generateTxnRef(maHd);
    const createDate = formatDateTime(new Date());

    const amount = Math.round(numericAmount * 100);

    // T·∫°o params theo ƒë√∫ng th·ª© t·ª± v√† ƒë·∫ßy ƒë·ªß theo t√†i li·ªáu VNPay
    const baseParams = {
      vnp_Version: vnpayConfig.vnp_Version,
      vnp_Command: vnpayConfig.vnp_Command,
      vnp_TmnCode: vnpayConfig.vnp_TmnCode,
      vnp_Amount: amount,
      vnp_CreateDate: createDate,
      vnp_CurrCode: vnpayConfig.vnp_CurrCode,
      vnp_IpAddr: vnpayConfig.vnp_ClientIp || getClientIpAddress(), 
      vnp_Locale: vnpayConfig.vnp_Locale,
      vnp_OrderInfo: sanitizeOrderInfo(moTa || `Thanh toan hoa don ${maHd}`),
      vnp_OrderType: vnpayConfig.vnp_OrderType, // B·∫ÆT BU·ªòC - lo·∫°i ƒë∆°n h√†ng
      vnp_ReturnUrl: vnpayConfig.vnp_ReturnUrl,
      vnp_TxnRef: txnRef,
    };

    // Th√™m vnp_BankCode n·∫øu mu·ªën chuy·ªÉn th·∫≥ng ƒë·∫øn QR code c·ªßa ng√¢n h√†ng c·ª• th·ªÉ
    if (directToQR && vnpayConfig.vnp_BankCode_QR) {
      baseParams.vnp_BankCode = vnpayConfig.vnp_BankCode_QR;
    }

    const vnpParams = filterParams(baseParams);

    // Log all parameters for debugging
    console.log('üîç VNPay Request Parameters:');
    console.log('  - vnp_TmnCode:', vnpParams.vnp_TmnCode);
    console.log('  - vnp_Amount:', vnpParams.vnp_Amount);
    console.log('  - vnp_OrderType:', vnpParams.vnp_OrderType);
    console.log('  - vnp_IpAddr:', vnpParams.vnp_IpAddr);
    console.log('  - vnp_OrderInfo:', vnpParams.vnp_OrderInfo);
    console.log('  - vnp_ReturnUrl:', vnpParams.vnp_ReturnUrl);

    const signData = buildSignedQuery(vnpParams);
    
    const secureHash = createHmacSHA512(vnpayConfig.vnp_HashSecret, signData);

    const paymentUrl = `${vnpayConfig.vnp_Url}?${signData}&vnp_SecureHash=${secureHash}`;

    // Log ƒë·ªÉ debug (production n√™n t·∫Øt)
    console.log('=== VNPay Payment URL Generation ===');
    console.log('TxnRef:', txnRef);
    console.log('Amount:', amount, '(VNƒê:', numericAmount, ')');
    console.log('Sign Data:', signData);
    console.log('Secure Hash:', secureHash);
    console.log('Payment URL (masked):', paymentUrl.replace(/vnp_TmnCode=[^&]+/, 'vnp_TmnCode=***'));
    console.log('===================================');

    return {
      success: true,
      paymentUrl,
      txnRef,
      signData,
      secureHash,
      amount: numericAmount,
      createDate,
    };
  } catch (error) {
    console.error('Error creating VNPay payment URL:', error);
    return {
      success: false,
      error: error.message,
    };
  }
};

/**
 * X√°c th·ª±c ch·ªØ k√Ω t·ª´ VNPay Return URL
 * @param {Object} queryParams - C√°c tham s·ªë t·ª´ return URL
 * @returns {Object} { isValid, message }
 */
export const verifyVNPayReturnUrl = (queryParams) => {
  try {
    const vnp_SecureHash = queryParams.vnp_SecureHash;

    if (!vnp_SecureHash) {
      throw new Error('Thi·∫øu ch·ªØ k√Ω t·ª´ VNPay');
    }

    // Lo·∫°i b·ªè c√°c tham s·ªë kh√¥ng c·∫ßn thi·∫øt
    const paramsToVerify = { ...queryParams };
    delete paramsToVerify.vnp_SecureHash;
    delete paramsToVerify.vnp_SecureHashType;

    // T·∫°o chu·ªói d·ªØ li·ªáu
    const signData = buildSignedQuery(paramsToVerify);

    // T·∫°o ch·ªØ k√Ω ƒë·ªÉ so s√°nh
    const secureHash = createHmacSHA512(vnpayConfig.vnp_HashSecret, signData);

    // So s√°nh ch·ªØ k√Ω
    const isValid = secureHash === vnp_SecureHash;

    console.log('=== VNPay Return URL Verification ===');
    console.log('Sign Data:', signData);
    console.log('Expected Hash:', secureHash);
    console.log('Received Hash:', vnp_SecureHash);
    console.log('Is Valid:', isValid);
    console.log('=====================================');

    return {
      isValid,
      message: isValid ? 'Ch·ªØ k√Ω h·ª£p l·ªá' : 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá',
    };
  } catch (error) {
    console.error('Error verifying VNPay return URL:', error);
    return {
      isValid: false,
      message: error.message,
    };
  }
};

/**
 * X√°c th·ª±c IPN t·ª´ VNPay
 * @param {Object} queryParams - C√°c tham s·ªë t·ª´ IPN request
 * @returns {Object} { isValid, shouldConfirm, responseCode, message }
 */
export const verifyVNPayIPN = (queryParams) => {
  try {
    // B∆∞·ªõc 1: Ki·ªÉm tra ch·ªØ k√Ω
    const verification = verifyVNPayReturnUrl(queryParams);
    
    if (!verification.isValid) {
      return {
        isValid: false,
        shouldConfirm: false,
        responseCode: '97', // Signature kh√¥ng ƒë√∫ng
        message: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá',
      };
    }

    // B∆∞·ªõc 2: Ki·ªÉm tra m√£ ph·∫£n h·ªìi t·ª´ VNPay
    const vnp_ResponseCode = queryParams.vnp_ResponseCode;
    const vnp_TransactionStatus = queryParams.vnp_TransactionStatus;

    // Ch·ªâ coi l√† th√†nh c√¥ng khi c·∫£ 2 m√£ ƒë·ªÅu l√† 00
    const isSuccess = vnp_ResponseCode === '00' && vnp_TransactionStatus === '00';

    // B∆∞·ªõc 3: Ki·ªÉm tra TxnRef
    const vnp_TxnRef = queryParams.vnp_TxnRef;
    
    // TODO: Ki·ªÉm tra TxnRef c√≥ t·ªìn t·∫°i v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
    // C·∫ßn implement database check ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng x·ª≠ l√Ω tr√πng

    // B∆∞·ªõc 4: Ki·ªÉm tra s·ªë ti·ªÅn
    const vnp_Amount = parseInt(queryParams.vnp_Amount);
    
    // TODO: Ki·ªÉm tra s·ªë ti·ªÅn c√≥ kh·ªõp v·ªõi database kh√¥ng
    // const expectedAmount = getAmountFromDatabase(vnp_TxnRef);
    // if (vnp_Amount !== expectedAmount * 100) {
    //   return { isValid: false, shouldConfirm: false, responseCode: '04', message: 'S·ªë ti·ªÅn kh√¥ng kh·ªõp' };
    // }

    console.log('=== VNPay IPN Verification ===');
    console.log('Response Code:', vnp_ResponseCode);
    console.log('Transaction Status:', vnp_TransactionStatus);
    console.log('TxnRef:', vnp_TxnRef);
    console.log('Amount:', vnp_Amount / 100, 'VNƒê');
    console.log('Is Success:', isSuccess);
    console.log('==============================');

    return {
      isValid: true,
      shouldConfirm: isSuccess,
      responseCode: isSuccess ? '00' : vnp_ResponseCode,
      message: isSuccess ? 'Giao d·ªãch th√†nh c√¥ng' : 'Giao d·ªãch th·∫•t b·∫°i',
      txnRef: vnp_TxnRef,
      amount: vnp_Amount / 100,
      bankCode: queryParams.vnp_BankCode,
      bankTranNo: queryParams.vnp_BankTranNo,
      cardType: queryParams.vnp_CardType,
      payDate: queryParams.vnp_PayDate,
      transactionNo: queryParams.vnp_TransactionNo,
    };
  } catch (error) {
    console.error('Error verifying VNPay IPN:', error);
    return {
      isValid: false,
      shouldConfirm: false,
      responseCode: '99', // L·ªói kh√¥ng x√°c ƒë·ªãnh
      message: error.message,
    };
  }
};

/**
 * Parse response code t·ª´ VNPay th√†nh message ti·∫øng Vi·ªát
 */
export const getVNPayResponseMessage = (responseCode) => {
  const messages = {
    '00': 'Giao d·ªãch th√†nh c√¥ng',
    '07': 'Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng)',
    '09': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng',
    '10': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn',
    '11': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch',
    '12': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a',
    '13': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP)',
    '24': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch',
    '51': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
    '65': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
    '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
    '79': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
    '99': 'C√°c l·ªói kh√°c (l·ªói c√≤n l·∫°i, kh√¥ng c√≥ trong danh s√°ch m√£ l·ªói ƒë√£ li·ªát k√™)',
  };

  return messages[responseCode] || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
};

/**
 * L∆∞u log giao d·ªãch VNPay
 * @param {Object} logData - D·ªØ li·ªáu log
 */
export const logVNPayTransaction = (logData) => {
  const timestamp = new Date().toISOString();
  const log = {
    timestamp,
    ...logData,
  };

  // Log ra console
  console.log('=== VNPay Transaction Log ===');
  console.log(JSON.stringify(log, null, 2));
  console.log('============================');

  // TODO: L∆∞u v√†o database ho·∫∑c file log
  // saveToDatabase(log);
  
  return log;
};

export default {
  createVNPayPaymentUrl,
  verifyVNPayReturnUrl,
  verifyVNPayIPN,
  getVNPayResponseMessage,
  logVNPayTransaction,
};
